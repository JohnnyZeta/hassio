
  # - alias: Backup Automatico
  #   trigger:
  #     platform: time
  #     at: '03:00:00'
  #   condition:
  #     - condition: time
  #       weekday:
  #         - mon
  #         #- thu
  #   action:
  #     - service: hassio.snapshot_full
  #       data_template:
  #         name: Automated Backup {{ now().strftime('%Y-%m-%d') }}
  #     - service: hassio.addon_stdin
  #       data:
  #         addon: 7be23ff5_dropbox_sync
  #         input:
  #           command: upload
  #     - service: shell_command.log
  #       data:
  #         text: 'Eseguito backup programmato'

###############################################################################

  - alias: Avviso Semola
    trigger:
      platform: state
      entity_id: vacuum.semola
      from: 'cleaning'
      to: 'docked'
    condition:
#      - condition: template
#        value_template: '{{ not is_state("switch.semola_schedule", "off") }}'
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
    action:
      - delay: 00:00:30
      # il delay serve per finire il caricamento della mappa pulizia dal server
      - service: notify.telefoni
        data_template:
          title: "Semola ha finito"
          message: >
            Ha appena pulito {{ states.vacuum.semola.attributes.clean_area }} mq e adesso ha il {{ states.vacuum.semola.attributes.battery_level }}% di batteria. In allegato la mappa della pulizia.
          data:
            attachment:
              content-type: jpeg
            push:
              category: camera
            entity_id: camera.semola_cleaning_map
      - service: shell_command.log
        data_template:
          text: >
            Semola ha finito, ha appena pulito {{ states.vacuum.semola.attributes.clean_area }} mq e adesso ha il {{ states.vacuum.semola.attributes.battery_level }}% di batteria.

###############################################################################

  # - alias: Programmazione Semola
  #   trigger:
  #     platform: time
  #     at: '11:00:00'
  #   condition:
  #     condition: time
  #     weekday:
  #       - mon
  #       - thu
  #   action:
  #     - service: vacuum.start
  #       data:
  #         entity_id: vacuum.semola
  #     - service: shell_command.log
  #       data:
  #         text: 'Semola è partito!'

###############################################################################

  # - alias: Vento Forte
  #   trigger:
  #     platform: numeric_state
  #     entity_id: sensor.dark_sky_wind_speed_1
  #     above: 3
  #     for:
  #       hours: 2
  #   condition:
  #     condition: time
  #     after: '09:00:00'
  #     before: '18:00:00'
  #   action:
  #     service: notify.telefoni
  #     data:
  #       message: "Vento forte previsto domani!"

###############################################################################

  # - alias: Programmazione Nuvola
  #   trigger:
  #     platform: time
  #     at: '22:45:00'
  #   condition:
  #     - condition: time
  #       weekday:
  #         - mon
  #         - tue
  #         - wed
  #         - thu
  #         - sun
  #     - condition: state
  #       entity_id: light.tv_2
  #       state: 'on'
  #   action:
  #     - service: switch.turn_on
  #       entity_id: switch.nuvola
  #     - delay: 01:00:00
  #     - service: switch.turn_off
  #       entity_id: switch.nuvola

###############################################################################

  # - alias: Timer Spegnimento Nuvola
  #   trigger:
  #     platform: state
  #     entity_id: switch.nuvola
  #     from: 'off'
  #     to: 'on'
  #   action:
  #     - delay: '00:15:00'
  #     - service: switch.turn_off
  #       data:
  #         entity_id: switch.nuvola

###############################################################################

  # - alias: "Aggiorna Ultimo Movimento"
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.presence_6, binary_sensor.presence_3, binary_sensor.presence_30, binary_sensor.presence_4
  #       to: 'on'
  #   action:
  #     - service: variable.set_variable
  #       data:
  #         variable: ultimo_movimento
  #         attributes_template: >
  #            {
  #               "history_1": "{{ variable.state }}",
  #               "history_2": "{{ variable.attributes.history_1 }}",
  #               "history_3": "{{ variable.attributes.history_2 }}"
  #             }
  #       data_template:
  #         value: "{{ trigger.to_state.attributes.friendly_name }}"

###############################################################################

  - alias: Blackout
    trigger:
      - platform: template
        value_template: '{{ (states.sensor.nut_ups_status_data.state | truncate(2,false,"",0)) == "OB" }}'
      - platform: template
        value_template: "{{ is_state('sensor.nut_ups_status_data', 'OL DISCHRG') }}"
    action:
      #- wait_template: '{{ (states.sensor.nut_ups_status_data.state | truncate(2,false,'',0)) == 'OL' }}'
      - wait_template: "{{ is_state('sensor.nut_ups_status_data', 'OL CHRG') or ((states.sensor.nut_ups_status_data.state | truncate(3,false,'',0)) == 'FSD' ) }}"
      - service: persistent_notification.create
        data_template:
          notification_id: blackout{{ now().strftime('D%dH%H%S') }}
          title: Blackout
          message: >
            Registrato Blackout dalle ore {{ as_timestamp(states.automation.blackout.attributes.last_triggered) | timestamp_custom('%H:%M', false ) }} alle ore {{ now().strftime('%H:%M') }} di {{ now().strftime('%A %d %B %Y') }}. Il Blackout è durato {{ (as_timestamp(now()) | int - as_timestamp(states.automation.blackout.attributes.last_triggered))/60 | round(0) }} minuti.
      - service: shell_command.log
        data_template:
          text: >
            Blackout dalle ore {{ as_timestamp(states.automation.blackout.attributes.last_triggered) | timestamp_custom('%H:%M', false ) }} alle ore {{ now().strftime('%H:%M') }} di {{ now().strftime('%A %d %B %Y') }}. Il Blackout è durato {{ (as_timestamp(now()) | int - as_timestamp(states.automation.blackout.attributes.last_triggered))/60 | round(0) }} minuti.
      - delay: "00:01:00"
      - service: light.turn_off
      - service: notify.mobile_app_iphone_di_alby
        data:
          message: 'Luci spente dopo il blackout!'

###############################################################################

  # - alias: Vacanza
  #   trigger:
  #     platform: state
  #     entity_id: input_boolean.vacanza
  #   action:
  #     - service_template: >
  #         {% if is_state("input_boolean.vacanza", "on") %}
  #           automation.turn_off
  #         {% else %}
  #           automation.turn_on
  #         {% endif %}
  #       data:
  #         entity_id: automation.arrivo_a_casa, automation.avviso_tempo_ritorno_alby, automation.avviso_tempo_ritorno_ale, automation.buongiorno_lavorativo, automation.buongiorno_weekends, automation.programmazione_semola
  #     - service_template: >
  #         {% if is_state("input_boolean.vacanza", "on") %}
  #           input_boolean.turn_off
  #         {% else %}
  #           input_boolean.turn_on
  #         {% endif %}
  #       data:
  #         entity_id: input_boolean.alarmweekon
  #     - service: notify.mobile_app_iphone_di_alby
  #       data_template:
  #         title: "Vacanza"
  #         message: >
  #           {% if is_state("input_boolean.vacanza", "on") %} Buon inizio Vacanza!
  #           {% else %} Buon ritorno al Lavoro!
  #           {% endif %}

###############################################################################

  - alias: Notifica Login Fallito
    # copiata da https://community.home-assistant.io/t/how-to-get-the-ip-address-from-a-failed-login-notification/39899/15
    trigger:
      - platform: state
        entity_id: persistent_notification.httplogin
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state != off }}"
    action:
      - service: notify.mobile_app_iphone_di_alby
        data_template:
          title: "Tentativo di Login fallito su Home Assistant!"
          message: "{{ states.persistent_notification.httplogin.attributes.message }}"
          data:
            url: http://www.ip-tracker.org/locator/ip-lookup.php?ip={{ states.persistent_notification.httplogin.attributes.message.split ("from ") [1]}}

###############################################################################

  # - alias: Cambio Aria
  #   trigger:
  #     platform: template
  #     value_template: "{{ (states.sensor.temperature_10.state | round(0)) == (states.sensor.temperature_32.state | round(0)) }}"
  #   condition:
  #     - condition: state
  #       entity_id: group.famiglia
  #       state: home
  #     - condition: time
  #       after: '08:30:00'
  #       before: '23:30:00'
  #     # Solo una volta ogni 3 ore
  #     - condition: template
  #       value_template: >
  #         {% if states.automation.cambio_aria.last_triggered is not none %}
  #           {% if as_timestamp(now()) | int - as_timestamp(states.automation.cambio_aria.attributes.last_triggered) | int > 10800 %} true {% else %} false
  #           {% endif %}
  #         {% else %}
  #         false
  #         {% endif %}
  #   action:
  #     - service: notify.mobile_app_iphone_di_alby
  #       data_template:
  #         title: "Finestre"
  #         message: "Temperatura interna uguale a quella esterna"

###############################################################################

  - alias: Bentornato Sonos Alby
    trigger:
      - platform: state
        entity_id: person.alberto
        to: 'home'
    condition:
      - condition: time
        after: '10:00:00'
        before: '22:00:00'
        # condizione seguente una volta ogni 5 minuti, per evitare casini quando rientriamo insieme
      - condition: template
        value_template: >
          {% if states.automation.bentornato_sonos_ale.last_triggered is not none %}
            {% if as_timestamp(now()) | int - as_timestamp(states.automation.bentornato_sonos_ale.attributes.last_triggered) | int > 300 %} true {% else %} false
            {% endif %}
          {% else %}
          false
          {% endif %}
    action:
      - wait_template: "{{ is_state('binary_sensor.porta_blindata', 'on') }}"
        timeout: '00:05:00'
        continue_on_timeout: 'false'
      - wait_template: "{{ is_state('binary_sensor.porta_blindata', 'off') }}"
        timeout: '00:01:00'
        continue_on_timeout: 'false'
      #- delay: '00:00:01'
      - service: sonos.snapshot
        data:
          entity_id: media_player.salotto
          with_group: 'true'
      - delay: '00:00:01'
      - service: media_player.volume_set
        data:
          entity_id: media_player.salotto
          volume_level: '0.4'
      - service: tts.google_say
        entity_id: media_player.salotto
        data:
          message: "Bentornato a casa, Alberto!"
      - delay: '00:00:03'
      - service: sonos.restore
        data:
          entity_id: media_player.salotto
          with_group: 'true'

  - alias: Bentornato Sonos Ale
    trigger:
      - platform: state
        entity_id: person.ale
        to: 'home'
    condition:
      - condition: time
        after: '10:00:00'
        before: '22:00:00'
        # condizione seguente una volta ogni 5 minuti, per evitare casini quando rientriamo insieme
      - condition: template
        value_template: >
          {% if states.automation.bentornato_sonos_alby.last_triggered is not none %}
            {% if as_timestamp(now()) | int - as_timestamp(states.automation.bentornato_sonos_alby.attributes.last_triggered) | int > 300 %} true {% else %} false
            {% endif %}
          {% else %}
          false
          {% endif %}
    action:
      - wait_template: "{{ is_state('binary_sensor.porta_blindata', 'on') }}"
        timeout: '00:05:00'
        continue_on_timeout: 'false'
      - wait_template: "{{ is_state('binary_sensor.porta_blindata', 'off') }}"
        timeout: '00:01:00'
        continue_on_timeout: 'false'
      #- delay: '00:00:01'
      - service: sonos.snapshot
        data:
          entity_id: media_player.salotto
          with_group: 'true'
      - delay: '00:00:01'
      - service: media_player.volume_set
        data:
          entity_id: media_player.salotto
          volume_level: '0.4'
      - service: tts.google_say
        entity_id: media_player.salotto
        data:
          message: "Bentornata a casa, puzzetta!"
      - delay: '00:00:03'
      - service: sonos.restore
        data:
          entity_id: media_player.salotto
          with_group: 'true'

###############################################################################

  - alias: Scadenza Certificato
    trigger:
      platform: numeric_state
      entity_id: sensor.ssl_certificate_expiry
      below: 8
    action:
      - service: notify.mobile_app_iphone_di_alby
        data:
          message: '7 giorni alla scadenza certificato SSL!'

###############################################################################

  - alias: Torrent completato
    trigger:
      platform: event
      event_type: transmission_downloaded_torrent
    action:
      service: notify.mobile_app_iphone_di_alby
      data_template:
        title: "Torrent completato!"
        message: "{{ trigger.event.data.name }}"

###############################################################################

  # - alias: Verifica Nanna
  #   trigger:
  #     platform: time
  #     at: '23:30:00'
  #   condition:
  #     - condition: state
  #       entity_id: light.disimpegno_3
  #       state: "off"
  #     - condition: state
  #       entity_id: binary_sensor.workday_sensor
  #       state: "on"
  #   action:
  #     - service: notify.firetv
  #       data:
  #         title: 'Nanna'
  #         message: 'E\' ora di andare a dormire!'

# ##############################################################################

#   - alias: Prova RFID
#     trigger:
#       - platform: state
#         entity_id: binary_sensor.tag1
#         from: 'off'
#         to: 'on'
#     action:
#       - service: media_player.media_play_pause
#         entity_id: media_player.cucina

  ##############################################################################

  - alias: "Apri Cancello Via Al Tubo"
    initial_state: true
    trigger:
      - platform: event
        event_type: ios.action_fired
        event_data:
          data:
            actionName: 'Apri Cancello'
          context:
            user_id: "c84a36a2ce794d10a9f96d444c08158f"
    action:
      service: persistent_notification.create
      data:
        notification_id: prova{{ now().strftime('D%dH%H%S') }}
        title: 'Prova'
        message: 'Apro Cancello!'

#################################################################################

  # - alias: Buon Natale RFID
  #   trigger:
  #     - platform: event
  #       event_type: ios.action_fired
  #       event_data:
  #         data:
  #           actionName: 'Buon Natale'
  #   action:
  #     - service: sonos.snapshot
  #       data:
  #         entity_id: media_player.salotto
  #         with_group: 'true'
  #     - delay: '00:00:01'
  #     - service: media_player.volume_set
  #       data:
  #         entity_id: media_player.salotto
  #         volume_level: '0.4'
  #     - service: tts.google_say
  #       entity_id: media_player.salotto
  #       data:
  #         message: "Buon Natale!"
  #     - delay: '00:00:03'
  #     - service: sonos.restore
  #       data:
  #         entity_id: media_player.salotto
  #         with_group: 'true'

#################################################################################